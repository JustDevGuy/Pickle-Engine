#include "Terrain.h"

Terrain::Terrain(glm::vec3 terrainPosition, int terrainSize, std::string heightmapFile)
{
    transform.Create(glm::vec3(terrainPosition.x, terrainPosition.y, terrainPosition.z), glm::vec3(0,0,0), 1);

    terrainTexture.CreateTexture(".//textures//grass.png");
    CreateTerrain(terrainSize, terrainSize, heightmapFile);

    shader.Start();
    shader.LoadTransformationMatrix(transform.GetTransform());
    shader.LoadLight(glm::vec3(0,300,50));
    shader.Stop();
}

void Terrain::RenderTerrain(Camera camera)
{
    //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

    shader.Start();
    glBindVertexArray(terrainVAO);
    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);
    glEnableVertexAttribArray(2);

    shader.LoadViewMatrix(camera.GetProjection() * camera.GetViewMatrix());
    terrainTexture.Bind();
    glDrawElements(GL_TRIANGLES, verticesCount, GL_UNSIGNED_INT, 0);

    glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);
    glDisableVertexAttribArray(2);
    glBindVertexArray(0);
    shader.Stop();

    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
}

int Terrain::GetPixelHeight(unsigned char* data, int imageWidth, int x, int y)
{
    if(x < 0 || x >= 256 || y < 0 || y >= 256)
        return 0;
    else
    {
        unsigned char* pixelOffset = data + (x + imageWidth * y) * 1;
        unsigned char r = pixelOffset[0];
        return (float)r / 10;
    }
}

void Terrain::CreateTerrain(int terrainWidth, int terrainLength, std::string heightmapFile)
{
    std::vector<float> vertices, normals, textureCoords;
    std::vector<unsigned int> indices;

    int x, y, comps;
    unsigned char *data = stbi_load(heightmapFile.c_str(), &x, &y, &comps, 1);

    int i = 0;
    for(int z = 0; z < terrainLength; z++) for(int x = 0; x < terrainWidth; x++)
    {
        glm::vec3 vertex = glm::vec3(x-terrainWidth/2, 0, z-terrainLength/2); //GetPixelHeight(data, y, x, z, 30)

        vertices.push_back(vertex.x); vertices.push_back(vertex.y); vertices.push_back(vertex.z);
        textureCoords.push_back(x); textureCoords.push_back(z);

        float heightL = GetPixelHeight(data, y, x-1, z);
        float heightR = GetPixelHeight(data, y, x+1, z);
        float heightD = GetPixelHeight(data, y, x, z-1);
        float heightU = GetPixelHeight(data, y, x, z+1);
        glm::vec3 normalVector = glm::normalize(glm::vec3(heightL - heightR, 2.0f, heightD - heightU));
        normalVector = glm::round(normalVector) * 256;

        normals.push_back(normalVector.x); normals.push_back(normalVector.y); normals.push_back(normalVector.z);

        if((i+1 % (int)terrainWidth) != 0 && z+1 < terrainLength)
        {
            glm::vec3 triangle1 = glm::vec3(i, i+terrainWidth, i+terrainWidth+1);
            glm::vec3 triangle2 = glm::vec3(i, i+terrainWidth+1, i+1);

            if(x < terrainWidth-1)
            {
                indices.push_back(triangle1.x); indices.push_back(triangle1.y); indices.push_back(triangle1.z);
                indices.push_back(triangle2.x); indices.push_back(triangle2.y); indices.push_back(triangle2.z);
            }
        }

        i++;
    }

    verticesCount = indices.size();

    glGenVertexArrays(1, &terrainVAO);
    glBindVertexArray(terrainVAO);

    glGenBuffers(1, &verticesVBO);
    glBindBuffer(GL_ARRAY_BUFFER, verticesVBO);
    glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(vertices[0]), vertices.data(), GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, false, 0, 0);

    glGenBuffers(1, &textureVBO);
    glBindBuffer(GL_ARRAY_BUFFER, textureVBO);
    glBufferData(GL_ARRAY_BUFFER, textureCoords.size() * sizeof(textureCoords[0]), textureCoords.data(), GL_STATIC_DRAW);
    glVertexAttribPointer(1, 2, GL_FLOAT, false, 0, 0);

    glGenBuffers(1, &normalsVBO);
    glBindBuffer(GL_ARRAY_BUFFER, normalsVBO);
    glBufferData(GL_ARRAY_BUFFER, normals.size() * sizeof(normals[0]), normals.data(), GL_STATIC_DRAW);
    glVertexAttribPointer(2, 3, GL_FLOAT, false, 0, 0);

    glGenBuffers(1, &indicesVBO);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indicesVBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(indices[0]), indices.data(), GL_STATIC_DRAW);

    glBindVertexArray(0);
}

void Terrain::Destroy()
{
    shader.CleanUp();
}
